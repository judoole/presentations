defaultTasks 'greet'

class Greet {
  def name
  Greet(who) { name = who[0].toUpperCase() + who[1..-1] }
  
  def salute() { println "Hello $name!" }
}

task greet <<{
	new Greet('John').salute()
}

task html <<{
	def builder = new groovy.xml.MarkupBuilder()
	builder.html {
		head {
			title"Heavyweight title of the world"
		}
		body {
			p"Belonged to the body of Mike Tyson"
			a(href:"http://www.youtube.com/watch?v=7FgS3kCv79I", "See for yourself")
		}
	}
}

task closure <<{
	def printSum = { a, b -> println a + b}
	printSum(2, 50000)

	//Implicit variables
	def singlearg = { println it }
	singlearg( "All the single ladies" )

	//As method arguments
	def list = ['a','b','c','d']
	def newList = []

	def clos = { it.toUpperCase() }
	list.collect( newList, clos )

	println newList

	//Closures in list
	def ninjaweapons = [ "Shuriken", "Katana", "Foot spikes", "Nunchucks", "Sai", "Katana" ];
	ninjaweapons.each() { print " ${it}" };
}

task spread{
	description = "The Spread Operator is used to invoke an action on all items of an aggregate object."
	doLast{
		def should_be_in_caps = ["beer", "time"]
		println should_be_in_caps*.toUpperCase();
	}
}


task elvis {
	description = "Nicer ternary operator ()"
	doLast{
		def elvisImpersonator
		def displayName = elvisImpersonator ? elvisImpersonator : "Anonymous" //traditional ternary operator usage
	
		displayName = elvisImpersonator ?: "Anonymous"  // more compact Elvis operator - does same as above

		println "Elvis-name ${displayName}"
	}
}

class User{
	def Address address	
}
class Address{
	def street
}

task safenav{
	description = 'Safe Navigation Operator'

	doLast{
		def user = new User()
		println user?.address?.street //Zero NPE here
	}		
}

task spaceship{
	description = "The Spaceship operator <=>"

	doLast{
		println "5 <=> 5000 => " + (5<=>50000)
	}
}

task linebreaks{
	description = "Strings with lines solved by '''"
	doLast{
		def kingstory = '''
			Once upon a time
			In the kingdom of Longfeathers
			Lived a cow
		'''
		
		println kingstory
	}
}

task regex{
	description = "Regex done this way =~"
	
	doLast{
		println '"cheesecheese" =~ "cheese" = ' + "cheesecheese" =~ "cheese"
		assert "cheesecheese" =~ "cheese"
	}
}